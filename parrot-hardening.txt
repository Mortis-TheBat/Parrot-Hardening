#TASK 1: Install AppArmour

	sudo aa-status --enabled; echo $?
	#read -p "Continue if output is 0"
	sudo apt install apparmor apparmor-utils auditd

	#Enable App AppArmour
	sudo mkdir -p /etc/default/grub.d

	echo 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT apparmor=1 security=apparmor"' | sudo tee /etc/default/grub.d/apparmor.cfg

	sudo update-grub
	sudo reboot


	#Troubleshoot

  	#Check what is enforce mode, run the following command:
  	#ps auxZ | grep -v '^unconfined'

  	#Start AppArmour
  	#sudo systemctl start apparmor
  
  
#TASK 2: RootKit Checks (uses rkhunter and chkrootkit)

  #Setting up rootkit checks
  
   #A   RkHunter
   		sudo apt install rkhunter
   		sudo rkhunter -c

   #B   ChkRootKit
   		sudo apt install chkrootkit
   		sudo chkrootkit
   		

#TASK 3 FILE PERMISSIONS
	Prepare yourself mentally because this is going to be a long list. But, permissions is one of the most important and critical tasks to achieve the security goal on a Linux host.
   		
	Set User/Group Owner and Permission on “/etc/anacrontab”, “/etc/crontab” and “/etc/cron.*” by executing the following commands:
   		
	sudo chown root:root /etc/anacrontab
	sudo chmod og-rwx /etc/anacrontab
	sudo chown root:root /etc/crontab
	sudo chmod og-rwx /etc/crontab
	sudo chown root:root /etc/cron.hourly
	sudo chmod og-rwx /etc/cron.hourly
	sudo chown root:root /etc/cron.daily
	sudo chmod og-rwx /etc/cron.daily
	sudo chown root:root /etc/cron.weekly
	sudo chmod og-rwx /etc/cron.weekly
	sudo chown root:root /etc/cron.monthly
	sudo chmod og-rwx /etc/cron.monthly
	sudo chown root:root /etc/cron.d        ################## FAILED
	sudo chmod og-rwx /etc/cron.d
   		
	#Set the right and permissions on “/var/spool/cron” for “root crontab”
   		
	sudo chown root:root <crontabfile>      ################## CHECK
	sudo chmod og-rwx <crontabfile>         ################## CHECK
   		
	#Set User/Group Owner and Permission on “passwd” file
   		
	sudo chmod 644 /etc/passwd
	sudo chown root:root /etc/passwd
   		
	#Set User/Group Owner and Permission on the “group” file
   		
	sudo chmod 644 /etc/group
	sudo chown root:root /etc/group
   		
	#Set User/Group Owner and Permission on the “shadow” file
   		
	sudo chmod 600 /etc/shadow
	sudo chown root:root /etc/shadow
   		
	#Set User/Group Owner and Permission on the “gshadow” file
   		
	sudo chmod 600 /etc/gshadow
	sudo chown root:root /etc/gshadow
   		
   		
#TASK 4 Consider making fstab read only (Unimplemented)
#Lock the boot directory (Source: https://www.networkworld.com/article/3143050/linux-hardening-a-15-step-checklist-for-a-secure-linux-server.html)
#The boot directory contains important files related to the Linux kernel, so you need to make sure to lock it down to read-only permissions by following the next simple steps. First, open the “nano /etc/fstab” file.


#Finally, set the permissions on the sshd_config file so that only root users can change its contents:

	sudo chown root:root /etc/ssh/sshd_config
	sudo chmod 600 /etc/ssh/sshd_config
	suco nano /etc/ssh/sshd_config
	#Consider changing default ssh port

#Make sure that root cannot login remotely through SSH:
	#PermitRootLogin no


######################## HONORABLE FUTURE CONSIDERATIONS #############################
# Firejail  - security sandbox
# lynis     - security auditing
# Samhain   - Linux IDS
# Tripwire  - Check integrity of files
######################################################################################
